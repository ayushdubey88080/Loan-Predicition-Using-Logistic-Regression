# -*- coding: utf-8 -*-
"""Copy of Loan Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-GTuZa4ZlCRic0QeDNFxwbszubnD2IK
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Sigmoid Function Curve
We are solving classification problem
"""





df=pd.read_csv("/content/User_Data.csv")

df

df.head()

df.tail()

df.info()

df.describe().T

df.shape

df.size

df.nunique

df.dtypes

"""# Uni Varicant"""

df.plot(kind='hist')

df.plot(x='EstimatedSalary',kind='hist')

sns.histplot(data=df,x='EstimatedSalary')

sns.boxplot(data=df,x='EstimatedSalary')

sns.countplot(data=df,x='Gender')

"""# Bi-varicant Analysis"""

df.plot(x='Gender',y='EstimatedSalary',kind='bar')

sns.barplot(data=df,x='Gender',y='EstimatedSalary')

df.plot(x='Age',y='EstimatedSalary',kind='scatter')

"""# Multi-Varicant Analysis"""

df.columns

res=df[['Age','EstimatedSalary','Purchased']].corr()

sns.heatmap(res)

sns.pairplot(df)

df.isnull().sum()

df

df.groupby('Gender')['EstimatedSalary'].mean()

label_df=df.groupby('Gender')['EstimatedSalary'].mean().index

value_df=df.groupby('Gender')['EstimatedSalary'].mean().values

plt.pie(x=value_df,labels=label_df,autopct='%1.2f%%')

df.sort_values(by='EstimatedSalary')[:5]

df.sort_values(by='EstimatedSalary')[:5]['Age']

df.sort_values(by='EstimatedSalary')[:1]['Age']

df2=[((df['EstimatedSalary']>20000)&(df['EstimatedSalary']<30000))]

df2

df2=[((df['EstimatedSalary']>100000)|(df['EstimatedSalary']<300000))]

df2

df2=[((df['EstimatedSalary']>20000)|(df['Age']<25))]

df2

from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split

from sklearn.metrics import accuracy_score

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()

df['Gender']=le.fit_transform(df['Gender'])

df

df=df.drop('User ID',axis=1)

X=df.drop("Purchased",axis=1)

df

y=df['Purchased']

X

y

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.33, random_state=42)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

lr=LogisticRegression()

lr.fit(X_train,y_train)

y_pred=lr.predict(X_test)

y_pred

accuracy_score(y_test,y_pred)

from sklearn.metrics import confusion_matrix

cm=confusion_matrix(y_test,y_pred)

sns.heatmap(cm,annot=True)

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred))